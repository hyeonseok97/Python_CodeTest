# 팀 결성
def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] =b

n, m = map(int,input().split())
parent = [0] * (n+1)

for i in range(1, n+1):
    parent[i] = i

for _ in range(m):
    test, a, b = map(int, input().split())
    if test == 0:
        union_parent(parent, a, b)
    else:
        if find_parent(parent,a) == find_parent(parent, b):
            print('YES')
        else:
            print('NO')

# 도시 분할 계획
def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

n, m = map(int, input().split())
parent = [0] * (n+1)

edges = []
result = 0
max = 0

for i in range(1, n+1):
    parent[i] = i
  
for _ in range(m):
    a, b, cost = map(int, input().split())
    edges.append((cost,a,b))

edges.sort()

for edge in edges:
    cost, a, b = edge
    if find_parent(parent,a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost
        max = cost

print(result - max)

# 커리큘럼
from collections import deque
import copy

n = int(input()) # 강의 수 n을 입력
graph =[[] for _ in range(n+1)]
indegree = [0] * (n+1)
time =[0] * (n+1)

for i in range(1, n+1): # 각 강의의 시간과 선수 강의 번호들이 주어짐 줄의 마지막은 -1
    data = list(map(int, input().split()))
    time[i] = data[0]
    for x in data[1:-1]:
        graph[x].append(i)
        indegree[i] += 1

def topology_sort():
    q = deque()
    result = copy.deepcopy(time)
    for i in range(1, n+1):
        if indegree[i] == 0:
            q.append(i)
    while q:
        now = q.popleft()
        for i in graph[now]:
            result[i] = max(result[i], result[now]+time[i])
            indegree[i] -= 1
            if indegree[i] == 0:
                q.append(i)
    for i in range(1, n+1):
        print(result[i])

topology_sort()
