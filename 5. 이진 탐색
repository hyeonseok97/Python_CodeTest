# 순차 탐색 코드

# 순차 탐색할 함수를 정의
def sequential_search(n,target,array):
    for i in range(int(n)): # 앞에서부터 차례대로 n번 탐색
        if array[i] == target: # 찾고자 하는 데이터와 일치하는 경우 해당 인덱스 값 +1 을 반환
            return i+1

print("생성할 원소 개수를 입력한 다음 한 칸 띄고 찾을 문자열을 입력하세요.")
n, target = input().split()

print("앞서 적은 원소 개수만큼 문자열을 입력하세요. 구분은 띄어쓰기 한 칸으로 합니다.")
array = list(input().split())

result = sequential_search(n,target,array)
print(result)

# 이진 탐색 코드 (재귀함수)

# 이진 탐색을 위한 함수 정의
def binary_search(target,start,end,array):
    if start > end:
        return None
    mid = (start+end) // 2 # 시작점과 끝점의 합을 2로 나눈 몫에 해당하는 값을 중간점에 할당
    
    # 중간점의 데이터가 타겟과 일치하면 중간점 인덱스를 반환
    if array[mid] == target:
        return mid
    
    # 중간점의 데이터가 타겟보다 작은 경우 시작점을 중간점 오른쪽으로 이동하여 재귀함수 호출
    elif array[mid] < target:
        return binary_search(target,mid+1,end,array)

    # 중간점의 데이터가 타겟보다 큰 경우 끝점을 중간점 왼쪽으로 이동하여 재귀함수 호출
    else:
        return binary_search(target,start,mid-1,array)

# 원소의 개수와 타겟을 입력받음
n, target = map(int,input().split())

# 전체 원소를 입력받음
array = list(map(int,input().split()))

result = binary_search(target,0,len(array)-1,array)
if result == None:
    print('원소가 존재하지 않습니다.')
else:
    print(result+1)
    
# 이진 탐색 코드 (반복문)

# 이진 탐색을 위한 함수 정의
def binary_search(target,start,end,array):
    while start <= end:
      mid = (start+end) // 2 # 시작점과 끝점의 합을 2로 나눈 몫에 해당하는 값을 중간점에 할당
      
      # 중간점의 데이터가 타겟과 일치하면 중간점 인덱스를 반환
      if array[mid] == target:
          return mid
      
      # 중간점의 데이터가 타겟보다 작은 경우 시작점을 중간점 오른쪽으로 이동하여 재귀함수 호출
      elif array[mid] < target:
          start = mid+1

      # 중간점의 데이터가 타겟보다 큰 경우 끝점을 중간점 왼쪽으로 이동하여 재귀함수 호출
      else:
          end = mid -1
    return None
    
# 원소의 개수와 타겟을 입력받음
n, target = map(int,input().split())

# 전체 원소를 입력받음
array = list(map(int,input().split()))

result = binary_search(target,0,len(array)-1,array)
if result == None:
    print('원소가 존재하지 않습니다.')
else:
    print(result+1)
    
# bisect 라이브러리를 이용한 특정한 범위에 있는 데이터 개수를 구하는 코드

from bisect import bisect_left, bisect_right

# left 값과 right 값 사이의 데이터 개수를 반환하는 함수 정의
def count_by_range(array, left_value, right_value):
    left = bisect_left(array,left_value)
    right = bisect_right(array,right_value)
    return right - left

# 데이터를 삽입할 리스트
array = [1,2,3,3,3,3,4,4,8,9]

print(count_by_range(array, 4, 4)) # 값이 4인 데이터의 개수
print(count_by_range(array,-1,3)) # -1에서 3까지의 데이터의 개수

# 부품 찾기

import sys
# 가게의 부품 갯수 n개 입력
n = int(sys.stdin.readline().rstrip())

# 각 부품의 번호를 공백으로 구분하여 n번 입력
store_array = list(map(int,input().split()))

# 주문한 부품 갯수 m개 입력
m = int(sys.stdin.readline().rstrip())

# 각 부품의 번호를 공백으로 구분하여 m번 입력
order_array = list(map(int,input().split()))

# 타겟은 주문한 부품의 번호, 가게의 부품 번호와 순차 탐색을 통해 있으면 yes, 없으면 no 출력
for target in order_array:
    if target in store_array:
        print("yes", end=' ')
    else:
        print("no", end=' ')

# 떡볶이 떡 만들기

# 내 코드
# 떡의 개수 n, 요청한 떡의 길이 m을 공백으로 구분하여 입력
n,m = map(int,input().split())

# 떡의 개별 높이가 주어짐 --> 오름차순으로 정렬
length = list(map(int,input().split()))
length.sort()

max = 0

while True:
    total = 0
    for i in length:
      if (i-max) >= 0:
        total += (i-max)
    if total >= m:
        max += 1
    else:
        max -= 1
        break

print(max)

# 이진 탐색 방법

# 떡의 개수 n, 요청한 떡의 길이 m을 공백으로 구분하여 입력
n,m = map(int,input().split())

# 떡의 개별 높이가 주어짐 
length = list(map(int,input().split()))

start = 0
end = max(length)

while start<=end:
    total = 0
    mid = (start+end) // 2
    for i in length:
      if (i-mid) >= 0:
          total += (i-mid)
    if total < m: # 떡의 양이 부족한 경우 mid를 줄임
        end = mid - 1
    else: # 떡의 양이 충분한 경우 mid를 늘림
      result = mid
      start = mid +1

print(result)
