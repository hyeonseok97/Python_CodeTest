# 피보나치 함수 코드 --> n이 커질수록 시간복잡도가 기하급수적으로 증가 
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))

# 피보나치 함수 코드(탑다운 방식, 메모이제이션을 이용)
table = [0]*100 # 리스트 초기화

def fibo(x):
    if x == 1 or x == 2:
        return 1
    if table[x] != 0: # 한 번 구한 결과를 다시 계산하지 않고, 그대로 이용
        return table[x]
    table[x] = fibo(x-1) + fibo(x-2) # 구하지 않은 결과에 대해서만 점화식을 통한 재귀함수를 호출
    return table[x]

print(fibo(99))

# 피보나치 함수 코드(보텀업방식)
table = [0] *100 # 리스트 초기화

# 초기값을 설정
table[1] = 1
table[2] = 1
n = 99

for i in range(3,n+1): # 반복문을 통해 작은 문제부터 차근차근 올라가는 방식
    table[i] = table[i-1] + table[i-2]

print(table[n])

# 1로 만들기
n = int(input()) # n을 입력받음

d = [0] * 30001 # 결과를 저장하기 위한 테이블 초기화

for i in range(2,n+1):
    d[i] = d[i-1] + 1
    if i % 2 == 0:
        d[i] = min(d[i], d[i//2] + 1)
    if i % 3 == 0:
        d[i] = min(d[i], d[i//3] + 1)
    if i % 5 == 0:
        d[i] = min(d[i], d[i//5] + 1)

print(d[n])

# 개미전사
n = int(input())

array = list(map(int,input().split()))

d = [0] * 100
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i-1], d[i-2]+ array[i])

print(d[n-1])

# 바닥 공사

n = int(input()) # 정수 n을 입력

d = [0] * 1001 # 구한 결과를 저장할 리스트 초기화
d[1] = 1 # 1, 2번째 값 초기화
d[2] = 3

# 다이나믹 프로그래밍의 보텀업 방식으로 구현
for i in range(3,n+1):
    d[i] = d[i-1] + d[i-2]*2

print(d[n]%796796)

# 효율적인 화폐구성

n, m = map(int, input().split()) # n,m 값을 입력 받음
array = [] # 화폐 단위에 대한 리스트

for i in range(n):
    array.append(int(input()))

count = [10001]*(m+1) # 최소 갯수를 넣기 위한 리스트 초기화
count[0] = 0

for i in range(len(array)):
    for j in range(array[i],m+1):
        if count[j-array[i]] != 10001:
            count[j] = min(count[j], count[j-array[i]]+1)

if count[m] == 10001:
    print(-1)
else:
    print(count[m])
