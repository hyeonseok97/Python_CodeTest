# 특정 거리의 도시 찾기
# 내 코드
import heapq
INF = int(1e9)

n, m, k, start = map(int, input().split())

graph = [[] for _ in range(n+1)]
for i in range(m):
    a, b = map(int, input().split())
    graph[a].append((b,1))

distance = [INF] * (n+1)

def dijkstra(start):
    q = []
    heapq.heappush(q,(0,start))
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost 
                heapq.heappush(q,(cost,i[0]))

dijkstra(start)
result = []
for i in range(1, len(distance)):
    if distance[i] == k:
        result.append(i)

if len(result) >= 1:
    for i in range(len(result)):
        print(result[i])
else:
    print(-1)
    
# 답안 예시
from collections import deque

n,m,k,start = map(int, input().split())

graph = [[] for _ in range(n+1)]
for i in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)

distance = [-1] * (n+1)

q = deque([start])
distance[start] = 0
while q:
    now = q.popleft()
    for i in graph[now]:
        if distance[i] == -1:
            distance[i] = distance[now] + 1
            q.append(i)

check = False
for i in range(1, len(distance)):
    if distance[i] == k:
        print(i)
        check = True

if not check:
    print(-1)
