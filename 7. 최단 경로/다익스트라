# 간단한 다익스트라 알고리즘

import sys
input = sys.stdin.readline
INF = int(1e9)

# 노드, 간선의 갯수를 입력
n, m = map(int,input().split())
start = int(input())
graph = [[] for _ in range(n+1)] # 노드간의 관계를 나타내는 그래프
visited = [False] * (n+1) # 방문처리를 하기 위한 리스트
distance = [INF] * (n+1) # 최단거리 테이블을 초기화

for _ in range(m):
    a, b, c = map(int,input().split()) # a 노드에 b 노드까지의 거리 c
    graph[a].append((b,c)) # 그래프에 해당 노드의 인덱스에 (노드,거리) 형태로 할당

# 테이블에서 방문하지 않은 노드들 중 최단거리가 가장 짧은 노드를 반환하는 함수 정의
def get_smallest_node():
    min_value = INF
    index = 0
    for i in range(1, n+1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return i

# 다익스트라 알고리즘을 구현하는 함수 정의
def dijkstra(start):
    distance[start] = 0
    visited[start] = True 
    for i in graph[start]: # 시작노드에서 갈 수 있는 노드에 대한 테이블 갱신
        distance[i[0]] = i[1]
    
    # 시작 노드를 제외한 전체 n-1 개의 노드에 대해 반복
    for j in range(n-1):
        now = get_smallest_node()
        visited[now] = True
        for i in graph[now]:
            cost = distance[now] + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost

dijkstra(start)

for i in range(1, n+1):
    if distance[i] == INF:
        print("INFINITY")
    else:
        print(distance[i])
        
# 개선된 다익스트라 알고리즘

import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

# 노드, 간선의 갯수를 입력
n, m = map(int,input().split())
start = int(input())
graph = [[] for _ in range(n+1)] # 노드간의 관계를 나타내는 그래프
distance = [INF] * (n+1) # 최단거리 테이블을 초기화

for _ in range(n):
    a, b, c = map(int,input().split()) # a 노드에 b 노드까지의 거리 c
    graph[a].append((b,c)) # 그래프에 해당 노드의 인덱스에 (노드,거리) 형태로 할당

# 다익스트라 알고리즘을 구현하는 함수 정의
def dijkstra(start):
    q = []
    heapq.heappush(q, (0,start))
    distance[start] = 0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                cost = dist + i[1]
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)

for i in range(1, n+1):
    if distance[i] == INF:
        print("INFINITY")
    else:
        print(distance[i])
