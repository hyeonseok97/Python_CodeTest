# 미래 도시
INF = int(1e9)

n,m = map(int,input().split()) # 회사의 갯수 n, 경로의 갯수 m 공백으로 구분되어 입력

graph = [[INF] * (n+1) for _ in range(n+1)] # 2차원 리스트를 초기화
for a in range(1, n+1):
  for b in range(1, n+1):
      if a == b:
          graph[a][b] = 0

# 연결된 두 회사의 번호가 공백으로 구분되어 입력 --> 그래프에 값을 1로 할당
for i in range(m):
    a, b = map(int, input().split())
    graph[a][b] = 1
    graph[b][a] = 1 # 양방향이므로 반대 방향도 1로 설정해줘야 한다.

x, k = map(int,input().split()) # 최종 목적지 x, 거쳐갈 목적지 k를 입력

# 3중 반복문을 통해 플로이드 워셜 알고리즘을 구현
for k in range(1, n+1):
    for i in range(1, n+1):
        for j in range(1, n+1):
            graph[i][j] = min(graph[i][j], graph[i][k]+graph[k][j])

if graph[1][k]+ graph[k][x] >= INF:
    print(-1)
else:
    print(graph[1][k]+ graph[k][x])
    
# 전보

import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

n, m, start = map(int, input().split())
graph = [[] for _ in range(n+1)]
distance = [INF] * (n+1)

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b,c))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0,start))
    distance[start] = 0

    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)
city = 0
time = 0

for i in range(1,n+1):
    if start != i:
        if distance == INF:
            continue
        else:
            city += 1
            time = max(time, distance[i])

print(city, time)
